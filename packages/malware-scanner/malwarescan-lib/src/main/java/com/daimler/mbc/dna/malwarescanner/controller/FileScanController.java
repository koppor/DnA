/* LICENSE START
 * 
 * MIT License
 * 
 * Copyright (c) 2019 Daimler TSS GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * LICENSE END 
 */

package com.daimler.mbc.dna.malwarescanner.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.daimler.mbc.dna.malwarescanner.api.ScanApi;
import com.daimler.mbc.dna.malwarescanner.app.authaspect.MalwareAuthController;
import com.daimler.mbc.dna.malwarescanner.app.config.ClamAVClient;
import com.daimler.mbc.dna.malwarescanner.app.config.ClamAvAppProperties;
import com.daimler.mbc.dna.malwarescanner.dto.FileScanDetailsVO;
import com.daimler.mbc.dna.malwarescanner.dto.UploadScanResponseWrapperVO;
import com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage;
import com.daimler.mbc.dna.malwarescanner.exceptions.MessageDescription;
import com.daimler.mbc.dna.malwarescanner.service.MalwareScanService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/api/v1")
@Api(value = "Malware scanner API", tags = { "scans" })
public class FileScanController implements ScanApi, MalwareAuthController {

	private static Logger LOGGER = LoggerFactory.getLogger(FileScanController.class);

	@Autowired
	private ClamAvAppProperties appProperties;

	@Autowired
	private ClamAVClient clamAVClient;

	@Autowired
	private MalwareScanService fileScanService;

	@Override
	@ApiOperation(value = "gives health of clamd instance", nickname = "healthCheck", notes = "gives health of clamd instance", response = com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage.class, tags = {
			"scans", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully downloaded.", response = com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage.class),
			@ApiResponse(code = 400, message = "Bad request"),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 404, message = "Invalid id, record not found."),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/scan/health", method = RequestMethod.GET)
	public ResponseEntity<com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage> healthCheck() {
		GenericMessage resposeMessage = new GenericMessage();
		boolean isHealthy = false;
		try {
			isHealthy = clamAVClient.ping();
		} catch (IOException ex) {
			LOGGER.error("Exception occurred while pinging clamav = {} ", ex.getMessage());
			MessageDescription errMsg = new MessageDescription();
			List<MessageDescription> errors = new ArrayList<>();
			String msg = "Exception occurred while pinging clamav. " + ex.getMessage();
			errMsg.setMessage(msg);
			errors.add(errMsg);
			resposeMessage.setErrors(errors);
		}
		String healthStatus = isHealthy ? "healthy" : "unhealthy";
		resposeMessage.setSuccess(healthStatus);
		LOGGER.debug("Health status is {} ", healthStatus);
		return new ResponseEntity<>(resposeMessage, HttpStatus.OK);
	}

	@Override
	@ApiOperation(value = "Uploads a new file to scan.", nickname = "uploadFile", notes = "Uploads file for malware scanning", response = UploadScanResponseWrapperVO.class, tags = {
			"scans", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "Returns message of succes or failure ", response = UploadScanResponseWrapperVO.class),
			@ApiResponse(code = 400, message = "Bad Request", response = UploadScanResponseWrapperVO.class),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/scan/upload", method = RequestMethod.POST)
	public ResponseEntity<UploadScanResponseWrapperVO> uploadFile(
			@ApiParam(value = "Request Body that contains data or file contents to be scanned", required = true) @Valid @RequestBody org.springframework.web.multipart.MultipartFile files) {
		UploadScanResponseWrapperVO wrapperVO = new UploadScanResponseWrapperVO();
		HttpStatus responseStatus = HttpStatus.OK;
		if(files.isEmpty()) {
			LOGGER.info("No file selected to scan.");
			FileScanDetailsVO fileScanDetailsVO = new FileScanDetailsVO();
			fileScanDetailsVO.setErrorMessage("Please select file to scan.");
			wrapperVO.setFileDetails(Arrays.asList(fileScanDetailsVO));
		}else {
			LOGGER.info("File found, proceed to scan.");
			List<FileScanDetailsVO> scanResponse = fileScanService.scanFiles(new MultipartFile[] { files });
			wrapperVO.setFileDetails(scanResponse);
			if(scanResponse!=null && scanResponse.get(0)!=null) {
				if(scanResponse.get(0).isDetected()!=null
					&& ("".equalsIgnoreCase(scanResponse.get(0).getErrorMessage()) || scanResponse.get(0).getErrorMessage()==null)){
					if(scanResponse.get(0).isDetected()==null) {
						scanResponse.get(0).setDetected(false);
						scanResponse.get(0).setErrorMessage("Scan service was temporarily unavailable, please retry again.");
					}
				}
			}
		}
		return new ResponseEntity<>(wrapperVO, responseStatus);
	}

}
