/* LICENSE START
 * 
 * MIT License
 * 
 * Copyright (c) 2019 Daimler TSS GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * LICENSE END 
 */

package com.daimler.mbc.dna.malwarescanner.app.authaspect;

import com.daimler.mbc.dna.malwarescanner.dto.appsubscription.ApiKeyValidationResponseVO;
import com.daimler.mbc.dna.malwarescanner.dto.appsubscription.ApiKeyValidationVO;
import com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage;
import com.daimler.mbc.dna.malwarescanner.exceptions.MessageDescription;
import com.daimler.mbc.dna.malwarescanner.service.appsubscription.AppSubscriptionService;
import jakarta.servlet.http.HttpServletRequest;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.util.ArrayList;
import java.util.List;

@Aspect
@Component
public class MalwareApiAuthenticationAspect {
	private static final Logger LOG = LoggerFactory.getLogger(MalwareApiAuthenticationAspect.class);

	@Value("${malware.basicAuth.token}")
	private String basicAuthToken;

	@Autowired
	AppSubscriptionService vService;

	@Around(value = "target(com.daimler.mbc.dna.malwarescanner.app.authaspect.MalwareAuthController)")
	public Object authenticateRequest(ProceedingJoinPoint jp) throws Throwable {

		final HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
				.getRequest();
		String appId = request.getHeader("appId");
		String appKey = request.getHeader("apiKey");
		String token = request.getHeader(HttpHeaders.AUTHORIZATION);
		if (StringUtils.hasText(token)) {
			LOG.info("Processing basic authentication...");
			if (!token.equals("Basic " + basicAuthToken)) {
				return forbidRequest("Failed to validate token, please provide valid credential and try.");
			} else {
				return jp.proceed();
			}
		} else if (StringUtils.hasText(appKey) && StringUtils.hasText(appId)) {
			ApiKeyValidationVO requestApiKeyValidationVO = new ApiKeyValidationVO();
			requestApiKeyValidationVO.setApiKey(appKey);
			requestApiKeyValidationVO.setAppId(appId);
			ApiKeyValidationResponseVO response = new ApiKeyValidationResponseVO();
			try {
				LOG.info("Validating api key for appId {}", appId);
				response = vService.validateApiKey(requestApiKeyValidationVO);
				if (response != null && response.isValidApiKey()) {
					return jp.proceed();
				} else {
					if (response != null && !ObjectUtils.isEmpty(response.getErrors())) {
						List<MessageDescription> errors = response.getErrors();
						return forbidRequest(errors.get(0).getMessage());
					} else {
						return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
					}
				}
			} catch (Exception e) {
				LOG.error("Exception {} occurred, while validating apiKey for appId {} ", e.getMessage(), appId);
				return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
			}

		}
		return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
	}

	private ResponseEntity<GenericMessage> forbidRequest(String msg) {
		LOG.info(msg);
		GenericMessage resposeMessage = null;
		resposeMessage = new GenericMessage();
		MessageDescription errMsg = new MessageDescription();
		List<MessageDescription> errors = new ArrayList<>();
		errMsg.setMessage(msg);
		errors.add(errMsg);
		resposeMessage.setErrors(errors);
		return new ResponseEntity<>(resposeMessage, HttpStatus.UNAUTHORIZED);
	}

}
