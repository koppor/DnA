/* LICENSE START
 * 
 * MIT License
 * 
 * Copyright (c) 2019 Daimler TSS GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * LICENSE END 
 */

package com.daimler.mbc.dna.malwarescanner.controller;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import com.daimler.mbc.dna.malwarescanner.dto.appsubscription.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.daimler.mbc.dna.malwarescanner.api.appsubscription.SubscribeApi;
import com.daimler.mbc.dna.malwarescanner.app.auth.UserStore;
import com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage;
import com.daimler.mbc.dna.malwarescanner.exceptions.MessageDescription;
import com.daimler.mbc.dna.malwarescanner.service.appsubscription.AppSubscriptionService;
import com.daimler.mbc.dna.malwarescanner.util.ConstantsUtility;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@Api(value = "Subscription API", tags = { "subscribe" })
@RequestMapping("/api")
public class AppSubscriptionController implements SubscribeApi {
	private static Logger LOGGER = LoggerFactory.getLogger(AppSubscriptionController.class);

	@Autowired
	AppSubscriptionService vService;

	@Autowired
	private UserStore userStore;

	@Override
	@ApiOperation(value = "Get all subscribed application.", nickname = "getAll", notes = "Get all subscribed application. This endpoints will be used to Get all subscribed application records.", response = SubscriptionDetailsCollection.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of succes or failure", response = SubscriptionDetailsCollection.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	public ResponseEntity<SubscriptionDetailsCollection> getAll(
			@ApiParam(value = "Flag to check If user want to view in admin mode", defaultValue = "false") @Valid @RequestParam(value = "admin", required = false, defaultValue = "false") Boolean admin,
			@ApiParam(value = "page number from which listing of subscribed service should start. Offset. Example 2") @Valid @RequestParam(value = "offset", required = false) Integer offset,
			@ApiParam(value = "page size to limit the number of subscribed service, Example 15") @Valid @RequestParam(value = "limit", required = false) Integer limit,
			@ApiParam(value = "Application Id of subscribed service.") @Valid @RequestParam(value = "appId", required = false) String appId,
			@ApiParam(value = "Field which will be used to sort record.") @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
			@ApiParam(value = "Order(asc,desc) in which record will get sorted.") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,
			@ApiParam(value = "searchTerm to filter subscription. SearchTerm is used to search appName and description of subscription. Example \"DNA\"") @Valid @RequestParam(value = "searchTerm", required = false) String searchTerm) {
		try {
			int defaultLimit = 10;
			if (offset == null || offset < 0) {
				offset = 0;
			}
			if (limit == null || limit < 0) {
				limit = defaultLimit;
			}
			if (sortOrder != null && !sortOrder.equals("asc") && !sortOrder.equals("desc")) {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
			if (sortOrder == null) {
				sortOrder = "asc";
			}
			String recordStatus = ConstantsUtility.OPEN;
			SubscriptionDetailsCollection subscriptionDetailsCollection = new SubscriptionDetailsCollection();
			Boolean isAdmin = false;
			CreatedByVO currentUser = this.userStore.getVO();
			String userId = currentUser != null ? currentUser.getId() : null;
			if (StringUtils.hasText(userId)) {
				isAdmin = this.userStore.getUserInfo().hasSuperAdminAccess();
			}
			LOGGER.debug("Check whether user wants to view in admin mode");
			isAdmin = (admin && isAdmin) ? true : false;
			Long count = vService.getCount(userId, isAdmin, recordStatus, appId, searchTerm);
			if (count < offset) {
				offset = 0;
			}

			List<SubscriptionVO> subscriptionsVO = vService.getAllWithFilters(userId, isAdmin, recordStatus, appId,
					sortBy, sortOrder, offset, limit, searchTerm);
			if (!ObjectUtils.isEmpty(subscriptionsVO)) {
				subscriptionDetailsCollection.setData(subscriptionsVO);
				subscriptionDetailsCollection.setTotalCount(count.intValue());
				return new ResponseEntity<>(subscriptionDetailsCollection, HttpStatus.OK);
			} else {
				return new ResponseEntity<>(subscriptionDetailsCollection, HttpStatus.NO_CONTENT);
			}

		} catch (Exception e) {
			LOGGER.error("Exception occurred while fetching subscriptionDetails {} ", e.getMessage());
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@Override
	@ApiOperation(value = "Subscribe a new application.", nickname = "subscribeApplication", notes = "Subscribe a new application and create unique key which will be used in access services on DnA platform.", response = SubscriptionResponseVO.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of succes or failure ", response = SubscriptionResponseVO.class),
			@ApiResponse(code = 400, message = "Bad Request", response = GenericMessage.class),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	public ResponseEntity<SubscriptionResponseVO> subscribeApplication(
			@ApiParam(value = "Request Body that contains data required for subscribe a new application", required = true) @Valid @RequestBody SubscriptionRequestVO subscriptionRequestVO) {
		SubscriptionVO requestSubscriptionVO = subscriptionRequestVO.getData();
		SubscriptionResponseVO response = new SubscriptionResponseVO();
		try {
			CreatedByVO currentUser = this.userStore.getVO();
			String userId = currentUser != null ? currentUser.getId() : null;
			if (vService.isApplicationSubscriptionExist(requestSubscriptionVO, userId)) {
				List<MessageDescription> messages = new ArrayList<>();
				MessageDescription message = new MessageDescription();
				message.setMessage("Application is already subscribed with name " + requestSubscriptionVO.getAppName());
				LOGGER.info("Application is already subscribed with name {}", requestSubscriptionVO.getAppName());
				messages.add(message);
				response.setData(requestSubscriptionVO);
				response.setErrors(messages);
				return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
			}
			SubscriptionVO subscriptionVO = vService.createApiKey(requestSubscriptionVO, userId);
			if (subscriptionVO != null && subscriptionVO.getId() != null) {
				LOGGER.info("Service subscribed successfully for appName {}", requestSubscriptionVO.getAppName());
				response.setData(subscriptionVO);
				return new ResponseEntity<>(response, HttpStatus.CREATED);
			} else {
				List<MessageDescription> messages = new ArrayList<>();
				MessageDescription message = new MessageDescription();
				message.setMessage("Failed to save due to internal error");
				LOGGER.info("Failed to subscribe with unknown error for appName {}",
						requestSubscriptionVO.getAppName());
				messages.add(message);
				response.setData(requestSubscriptionVO);
				response.setErrors(messages);
				return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		} catch (Exception e) {
			LOGGER.error("Exception occurred:{} appName {}", e.getMessage(), requestSubscriptionVO.getAppName());
			List<MessageDescription> messages = new ArrayList<>();
			MessageDescription message = new MessageDescription();
			message.setMessage(e.getMessage());
			messages.add(message);
			response.setData(requestSubscriptionVO);
			response.setErrors(messages);
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@ApiOperation(value = "Delete subscription of a service for a given Id.", nickname = "delete", notes = "Delete subscription of a service for a given identifier.", response = GenericMessage.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of success or failure", response = GenericMessage.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.DELETE)
	@Override
	public ResponseEntity<GenericMessage> delete(
			@ApiParam(value = "Subscription ID to be deleted", required = true) @PathVariable("id") String id) {
		try {
			return vService.deleteSubscriptionById(id);
		} catch (Exception e) {
			LOGGER.error("Failed to delete due to internal error {} for id {}", e.getMessage(), id);
			MessageDescription exceptionMsg = new MessageDescription(e.getMessage());
			GenericMessage errorMessage = new GenericMessage();
			errorMessage.addErrors(exceptionMsg);
			return new ResponseEntity<>(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@ApiOperation(value = "Get Subscription for a given Id.", nickname = "getById", notes = "Get subscription for a given identifier. This endpoints will be used to get a subscription for a given identifier.", response = SubscriptionVO.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of success or failure", response = SubscriptionVO.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	@Override
	public ResponseEntity<SubscriptionVO> getById(
			@ApiParam(value = "Subscription ID to be fetched", required = true) @PathVariable("id") String id) {
		Boolean isAdmin = false;
		HttpStatus httpStatus = null;
		CreatedByVO currentUser = this.userStore.getVO();
		String userId = currentUser != null ? currentUser.getId() : null;
		if (StringUtils.hasText(userId)) {
			isAdmin = this.userStore.getUserInfo().hasSuperAdminAccess();
		}
		SubscriptionVO subscriptionVO = vService.getById(id);
		if (subscriptionVO != null) {
			if (!isAdmin && !userId.equals(subscriptionVO.getCreatedBy())) {
				subscriptionVO = null;
				httpStatus = HttpStatus.NO_CONTENT;
			} else {
				httpStatus = HttpStatus.OK;
			}
		} else {
			httpStatus = HttpStatus.NO_CONTENT;
		}
		return new ResponseEntity<>(subscriptionVO, httpStatus);
	}

	@Override
	@ApiOperation(value = "Number of subscribers.", nickname = "getNumberOfSubscribers", notes = "Get number of subscribers. This endpoints will be used to get number of available subscribers.", response = TransparencyVO.class, tags={ "subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "Returns message of success or failure", response = TransparencyVO.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription/transparency",
			produces = { "application/json" },
			consumes = { "application/json" },
			method = RequestMethod.GET)
	public ResponseEntity<TransparencyVO> getNumberOfSubscribers() {
		try {

			Integer count = vService.getTotalCountOfMalwareSubscription();
			TransparencyVO transparencyVO = new TransparencyVO();
			transparencyVO.setCount(count);
			LOGGER.info("Malware subscription count fetched successfully");
			return new ResponseEntity<>(transparencyVO, HttpStatus.OK);
		}catch (Exception e){
			LOGGER.error("Failed to fetch count of Malware subscription with exception {} ", e.getMessage());
			return  new ResponseEntity<>(new TransparencyVO(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@Override
	@ApiOperation(value = "Refresh Subscription apiKey for a given appId.", nickname = "refreshApiKeyByAppId", notes = "Refresh subscription apiKey for a given identifier. This endpoints will be used to refresh a subscription apiKey for a given identifier.", response = SubscriptionVO.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of success or failure", response = SubscriptionVO.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription/{appId}/refresh", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	public ResponseEntity<SubscriptionResponseVO> refreshApiKeyByAppId(
			@ApiParam(value = "Subscription appId for which apiKey to be refreshed", required = true) @PathVariable("appId") String appId) {
		SubscriptionResponseVO response = new SubscriptionResponseVO();
		try {
			SubscriptionVO existingSubscriptionVO = vService.getByUniqueliteral("appId", appId);
			CreatedByVO currentUser = this.userStore.getVO();
			String userId = currentUser != null ? currentUser.getId() : "";
			boolean isAdmin = false;
			boolean isOwner = false;
			if (StringUtils.hasText(userId)) {
				isAdmin = this.userStore.getUserInfo().hasSuperAdminAccess();
				String createdBy = StringUtils.hasText(existingSubscriptionVO.getCreatedBy())
						? existingSubscriptionVO.getCreatedBy()
						: null;
				isOwner = (createdBy != null && createdBy.equals(userId));
			}

			if (!isAdmin && !isOwner) {
				List<MessageDescription> messages = new ArrayList<>();
				MessageDescription notAuthorizedMsg = new MessageDescription();
				notAuthorizedMsg.setMessage(
						"Not authorized to refresh subscription apiKey. Only subscriber or an admin can refresh the api key.");
				messages.add(notAuthorizedMsg);
				response.setErrors(messages);
				return new ResponseEntity<>(response, HttpStatus.FORBIDDEN);
			}

			SubscriptionVO subscriptionVO = vService.refreshApiKeyByAppId(appId, userId, existingSubscriptionVO);
			if (subscriptionVO != null && subscriptionVO.getId() != null) {
				LOGGER.info("Api Key refreshed successfully for appId {}", appId);
				response.setData(subscriptionVO);
				return new ResponseEntity<>(response, HttpStatus.OK);
			} else {
				LOGGER.info("Invalid appId {}", appId);
				List<MessageDescription> messages = new ArrayList<>();
				MessageDescription errMsg = new MessageDescription();
				errMsg.setMessage("Invalid appId");
				response.setErrors(messages);
				return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
			}
		} catch (Exception e) {
			LOGGER.error("Error occured while refreshing apiKey for appid {} exception is : {}", appId, e.getMessage());
			List<MessageDescription> messages = new ArrayList<>();
			MessageDescription errMsg = new MessageDescription();
			errMsg.setMessage(e.getMessage());
			response.setErrors(messages);
			return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@ApiOperation(value = "Update expiry days of a service subscription for a given Id.", nickname = "update", notes = "Set expiry of a service subscription for a given identifier.", response = SubscriptionResponseVO.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Updated successfully", response = SubscriptionResponseVO.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found.", response = GenericMessage.class),
			@ApiResponse(code = 400, message = "Bad request.", response = GenericMessage.class),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	@Override
	public ResponseEntity<SubscriptionResponseVO> update(
			@ApiParam(value = "Request Body that contains data required for updating expiry of an existing subscription", required = true) @Valid @RequestBody SubscriptionExpireRequestVO expireRequestVO) {
		SubscriptionExpireVO expireVO = expireRequestVO.getData();
		SubscriptionResponseVO response = new SubscriptionResponseVO();
		SubscriptionVO mergedSubscriptionVO = null;
		HttpStatus status = null;
		List<MessageDescription> messages = null;
		MessageDescription message = null;
		try {
			CreatedByVO currentUser = this.userStore.getVO();
			String userId = currentUser != null ? currentUser.getId() : null;
			Boolean isAdmin = false;
			if (StringUtils.hasText(userId)) {
				isAdmin = this.userStore.getUserInfo().hasSuperAdminAccess();
			}

			if (isAdmin) {
				mergedSubscriptionVO = vService.updateSubscription(userId, expireVO);
				if (mergedSubscriptionVO != null && StringUtils.hasText(mergedSubscriptionVO.getId())) {
					LOGGER.info("Updated subscription for appId {}", expireVO.getAppId());
					status = HttpStatus.OK;
				} else {
					message = new MessageDescription();
					message.setMessage("No subscription found for given id. Update cannot happen");
					LOGGER.info("Updat subscription for appId {} is unsuccessful", expireVO.getAppId());
					status = HttpStatus.NOT_FOUND;
				}
			} else {
				message = new MessageDescription();
				message.setMessage("Not authorized to update subscription. Only admin can update.");
				LOGGER.info("Updat subscription for appId {} is unsucessful, no previliges", expireVO.getAppId());
				status = HttpStatus.FORBIDDEN;
			}
		} catch (Exception e) {
			LOGGER.error("Exception occurred:{} for updating subscription of appId {} ", e.getMessage(),
					expireVO.getAppId());
			message = new MessageDescription();
			message.setMessage(e.getMessage());
			status = HttpStatus.INTERNAL_SERVER_ERROR;
		}
		if (!ObjectUtils.isEmpty(message)) {
			messages = new ArrayList<MessageDescription>();
			messages.add(message);
			response.setErrors(messages);
		}
		response.setData(mergedSubscriptionVO);
		return new ResponseEntity<>(response, status);
	}

	@Override
	@ApiOperation(value = "Update subscription for a given subscribedAppId.", nickname = "updateSubscriptionByAppId", notes = "Update subscription for a given subscribedAppId.", response = SubscriptionResponseVO.class, tags = {
			"subscribe", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns message of success or failure", response = SubscriptionResponseVO.class),
			@ApiResponse(code = 204, message = "Fetch complete, no content found."),
			@ApiResponse(code = 400, message = "Bad request."),
			@ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
			@ApiResponse(code = 403, message = "Request is not authorized."),
			@ApiResponse(code = 405, message = "Method not allowed"),
			@ApiResponse(code = 500, message = "Internal error") })
	@RequestMapping(value = "/subscription/provision", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	public ResponseEntity<SubscriptionResponseVO> updateSubscriptionByAppId(
			@ApiParam(value = "Request body to update subscription", required = true) @Valid @RequestBody SubscriptionProvisionRequestVO subscriptionProvisionRequestVO) {
		return vService.updateSolIdForSubscribedAppId(subscriptionProvisionRequestVO);
	}

}
